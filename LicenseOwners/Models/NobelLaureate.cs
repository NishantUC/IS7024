// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var nobleLaureate = NobleLaureate.FromJson(jsonString);

namespace LicenseOwners.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NobleLaureate
    {
        [JsonProperty("id", Required = Required.Always)]

        public long Id { get; set; }

        [JsonProperty("firstname", Required = Required.Always)]
        public string Firstname { get; set; }

        [JsonProperty("surname", Required = Required.Always)]
        public string Surname { get; set; }

        [JsonProperty("born", Required = Required.Always)]
        public DateTimeOffset Born { get; set; }

        [JsonProperty("died", Required = Required.Always)]
        public string Died { get; set; }

        [JsonProperty("bornCountry", Required = Required.Always)]
        public string BornCountry { get; set; }

        [JsonProperty("bornCountryCode", Required = Required.Always)]
        public string BornCountryCode { get; set; }

        [JsonProperty("bornCity", Required = Required.Always)]
        public string BornCity { get; set; }

        [JsonProperty("gender", Required = Required.Always)]
        public string Gender { get; set; }

        [JsonProperty("prizes", Required = Required.Always)]
        public Prize[] Prizes { get; set; }
    }

    public partial class Prize
    {
        [JsonProperty("year", Required = Required.Always)]

        public long Year { get; set; }

        [JsonProperty("category", Required = Required.Always)]
        public long Category { get; set; }

        [JsonProperty("share", Required = Required.Always)]

        public long Share { get; set; }

        [JsonProperty("motivation", Required = Required.Always)]
        public string Motivation { get; set; }

        [JsonProperty("affiliations", Required = Required.Always)]
        public Affiliation[] Affiliations { get; set; }
    }

    public partial class Affiliation
    {
        [JsonProperty("affiliationClass", Required = Required.Always)]
        public AffiliationClass AffiliationClass { get; set; }
    }

    public partial class AffiliationClass
    {
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("city", Required = Required.Always)]
        public string City { get; set; }

        [JsonProperty("country", Required = Required.Always)]
        public string Country { get; set; }
    }

    public partial class NobleLaureate
    {
        public static NobleLaureate[] FromJson(string json) => JsonConvert.DeserializeObject<NobleLaureate[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NobleLaureate[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }


}
